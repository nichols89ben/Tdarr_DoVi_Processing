name: Auto Build & Push DoVi Tdarr Node

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      # Login first so setup-buildx can pull its BuildKit image without 401s
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Pull Tdarr base and extract version
        id: get-version
        run: |
          docker pull ghcr.io/haveagitgat/tdarr:latest > /dev/null
          version=$(docker history --no-trunc --format '{{.CreatedBy}}' ghcr.io/haveagitgat/tdarr:latest \
                    | grep -m1 'ARG VERSION=' | sed 's/.*ARG VERSION=\([0-9.]*\).*/\1/')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Restore last version
        id: restore
        run: |
          echo "version=" > last_version.txt
          if [ -f tdarr_version.txt ]; then cp tdarr_version.txt last_version.txt; fi
          echo "last_version=$(cat last_version.txt)" >> $GITHUB_OUTPUT

      - name: Check if base version changed
        id: check
        run: |
          if [ "${{ steps.get-version.outputs.version }}" = "${{ steps.restore.outputs.last_version }}" ]; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Build and Push Docker image
        if: steps.check.outputs.changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: 'Docker/dovi-tdarr-node:latest/Dockerfile'
          push: true
          tags: nichols89ben/dovi-tdarr-node:latest

      - name: Save new version
        if: steps.check.outputs.changed == 'true'
        run: echo "${{ steps.get-version.outputs.version }}" > tdarr_version.txt

      - name: Commit and push updated version file
        if: steps.check.outputs.changed == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add tdarr_version.txt
          git commit -m "Update tdarr_version.txt to ${{ steps.get-version.outputs.version }}" || exit 0
          git push
